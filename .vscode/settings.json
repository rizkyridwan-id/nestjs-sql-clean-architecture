{
    // file templates plugin
    "folderTemplates.fileTemplates": {
        "create-model": [
            "import { Provider } from '@nestjs/common';",
            "import { Optional } from 'sequelize';",
            "import { Table, Model } from 'sequelize-typescript';",
            "",
            "// Define Attributes interface first",
            "interface <FTName | pascalcase>Attributes {",
            "  id: number;",
            "}",
            "",
            "interface <FTName | pascalcase>CreationAttributes extends Optional<<FTName | pascalcase>Attributes, 'id'> {}",
            "",
            "@Table({ tableName: '<FTName | snakecase>' })",
            "export class <FTName | pascalcase>Model extends Model<",
            "  <FTName | pascalcase>Attributes,",
            "  <FTName | pascalcase>CreationAttributes",
            "> {",
            "  // Put your schema here",
            "}",
            "",
            "export const <FTName | constantcase>_MODEL = '<FTName | constantcase>_MODEL';",
            "export const <FTName | camelcase>ModelProvider: Provider = {",
            "  provide: <FTName | constantcase>_MODEL,",
            "  useValue: <FTName | pascalcase>Model,",
            "};",
            "",
        ],
        "create-entity": [
            "import { Entity } from 'src/core/base/domain/entity';",
            "",
            "export interface <FTName | pascalcase>Props {",
            "  // put field interface here",
            "  name: string;",
            "}",
            "",
            "export class <FTName | pascalcase>Entity extends Entity<<FTName | pascalcase>Props> {",
            "  constructor(props: <FTName | pascalcase>Props) {",
            "    super(props);",
            "  }",
            "}",
            ""
        ],
        "create-mapper": [
            "import { <FTName | pascalcase>Entity } from './<FTName | paramcase>.entity';",
            "import { <FTName | pascalcase>Model } from '../repository/<FTName | paramcase>.model';",
            "import { IDbMapper } from 'src/port/interface/db-mapper.interface';",
            "",
            "export class <FTName | pascalcase>Mapper implements IDbMapper<<FTName | pascalcase>Entity, <FTName | pascalcase>Model> {",
            "  toSqlProps(entity: <FTName | pascalcase>Entity): <FTName | pascalcase>Model {",
            "  const entityProps = entity.getPropsCopy();",
            "",
            "  const sqlModel: <FTName | pascalcase>Model = new <FTName | pascalcase>Model({});",
            "  return sqlModel;",
            "  }",
            "}",
            ""
        ],
        "create-port-repository": [
            "import { BaseRepositoryPort } from './repository.base.port';",
            "import { <FTName | pascalcase>Entity } from '../../module/<FTName | paramcase>/domain/<FTName | paramcase>.entity';",
            "import { <FTName | pascalcase>Model } from '../../module/<FTName | paramcase>/repository/<FTName | paramcase>.model';",
            "",
            "export interface <FTName | pascalcase>RepositoryPort",
            "  extends BaseRepositoryPort<<FTName | pascalcase>Entity, <FTName | pascalcase>Model> {}",
            ""
        ],
        "create-repo": [
            "import { Inject, Injectable } from '@nestjs/common';",
            "",
            "import { <FTName | pascalcase>RepositoryPort } from '../../../port/repository/<FTName | pascalcase>.repository.port';",
            "",
            "import { <FTName | pascalcase>Entity } from '../domain/<FTName | paramcase>.entity';",
            "import { <FTName | pascalcase>Mapper } from '../domain/<FTName | paramcase>.mapper';",
            "",
            "import { BaseRepository } from 'src/core/base/module/repository.base';",
            "import { <FTName | pascalcase>Model } from './<FTName | paramcase>.model';",
            "import { <FTName | constantcase>_MODEL } from './<FTName | paramcase>.model';",
            "",
            "@Injectable()",
            "export class <FTName | pascalcase>Repository",
            "  extends BaseRepository<<FTName | pascalcase>Entity, <FTName | pascalcase>Model>",
            "  implements <FTName | pascalcase>RepositoryPort",
            "{",
            "  constructor(",
            "    @Inject(<FTName | constantcase>_MODEL)",
            "    private <FTName | camelcase>Model: typeof <FTName | pascalcase>Model,",
            "  ) {",
            "    super(<FTName | camelcase>Model, new <FTName | pascalcase>Mapper());",
            "  }",
            "}",
            "",
        ],
        "create-provider-repository": [
            "import { Inject, Provider } from '@nestjs/common';",
            "import { <FTName | pascalcase>Repository } from './<FTName | paramcase>.repository.service';",
            "",
            "export const Inject<FTName | pascalcase>Repository = Inject(<FTName | pascalcase>Repository.name);",
            "",
            "export const <FTName | camelCase>RepositoryProvider: Provider = {",
            "  provide: <FTName | pascalcase>Repository.name,",
            "  useClass: <FTName | pascalcase>Repository,",
            "};",
            ""
        ],
        "create-module-repository": [
            "import { Module } from '@nestjs/common';",
            "import { <FTName | camelcase>ModelProvider } from './<FTName | paramcase>.model';",
            "import { <FTName | camelcase>RepositoryProvider } from './<FTName | paramcase>.repository.provider';",
            "",
            "@Module({",
            "  providers: [<FTName | camelcase>RepositoryProvider, <FTName | camelcase>ModelProvider],",
            "  exports: [<FTName | camelcase>RepositoryProvider, <FTName | camelcase>ModelProvider],",
            "})",
            "export class <FTName | pascalcase>RepositoryModule {}",
            "",
        ],
        "create provider usecase": [
            "import { Provider } from '@nestjs/common';",
            "",
            "export const <FTName | camelcase>UseCaseProvider: Provider[] = [];",
            ""
        ],
        "create module usecase": [
            "import { Module } from '@nestjs/common';",
            "import { <FTName | pascalcase>RepositoryModule } from '../repository/<FTName | paramcase>.repository.module';",
            "import { <FTName | camelcase>UseCaseProvider } from './<FTName | paramcase>.use-case.provider';",
            "",
            "@Module({",
            "  imports: [<FTName | pascalcase>RepositoryModule],",
            "  exports: <FTName | camelcase>UseCaseProvider,",
            "  providers: <FTName | camelcase>UseCaseProvider,",
            "})",
            "export class <FTName | pascalcase>UseCaseModule {}",
            ""
        ],
        "create controller": [
            "import { Controller } from '@nestjs/common';",
            "",
            "@Controller('v1/<FTName | paramcase>')",
            "export class <FTName | pascalcase>Controller {",
            "  constructor() {",
            "    // fill above parentheses with use case / repository dependencies",
            "  }",
            "}",
            ""
        ],
        "create module resource": [
            "import { Module } from '@nestjs/common';",
            "import { <FTName | pascalcase>RepositoryModule } from './repository/<FTName | paramcase>.repository.module';",
            "import { <FTName | pascalcase>UseCaseModule } from './use-case/<FTName | paramcase>.use-case.module';",
            "import { <FTName | pascalcase>Controller } from './controller/<FTName | paramcase>.controller';",
            "",
            "@Module({",
            "  imports: [<FTName | pascalcase>UseCaseModule, <FTName | pascalcase>RepositoryModule],",
            "  controllers: [<FTName | pascalcase>Controller],",
            "})",
            "export class <FTName | pascalcase>Module {}",
            ""
        ]
    },
    // folder templates plugin
    "folderTemplates.structures": [
        {
            "name": "Create Resource",
            "structure": [
                // 1. creating model
                {
                    "fileName": "repository/<FTName | paramcase>.model.ts",
                    "template": "create-model"
                },
                // 2. creating entity 
                {
                    "fileName": "domain/<FTName | paramcase>.entity.ts",
                    "template": "create-entity"
                },
                // 3. creating mapper
                {
                    "fileName": "domain/<FTName | paramcase>.mapper.ts",
                    "template": "create-mapper"
                },
                // 4. create repo port
                {
                    "fileName": "../../port/repository/<FTName | paramcase>.repository.port.ts",
                    "template": "create-port-repository"
                },
                // 5. create repo
                {
                    "fileName": "repository/<FTName | paramcase>.repository.service.ts",
                    "template": "create-repo"
                },
                // 6. create repo provider
                {
                    "fileName": "repository/<FTName | paramcase>.repository.provider.ts",
                    "template": "create-provider-repository"
                },
                // 7. create repo module
                {
                    "fileName": "repository/<FTName | paramcase>.repository.module.ts",
                    "template": "create-module-repository"
                },
                // 8. create use-case provider
                {
                    "fileName": "use-case/<FTName | paramcase>.use-case.provider.ts",
                    "template": "create provider usecase"
                },
                // 9. create use-case module
                {
                    "fileName": "use-case/<FTName | paramcase>.use-case.module.ts",
                    "template": "create module usecase"
                },
                // 10. create controller
                {
                    "fileName": "controller/<FTName | paramcase>.controller.ts",
                    "template": "create controller"
                },
                // 11. create resource module
                {
                    "fileName": "<FTName | paramcase>.module.ts",
                    "template": "create module resource"
                }
            ]
        }
    ],
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": "explicit"
    },
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
}