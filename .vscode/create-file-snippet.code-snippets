{
    // Place your nestjs-ddd-base workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    // Use case Layer
    "Create Use Case": {
        "scope": "typescript",
        "prefix": ">>genusecase",
        "body": [
            "import { Injectable } from '@nestjs/common';",
            "import { BaseUseCase, IUseCase } from 'src/core/base/module/use-case.base';",
            "",
            "import { PickUseCasePayload } from 'src/core/base/types/pick-use-case-payload.type';",
            "",
            "type T${1:Feature}Payload = PickUseCasePayload<",
            "  ${2:FeatureDto},",
            "  'data'",
            ">;",
            "",
            "@Injectable()",
            "export class ${1:Feature}",
            "  extends BaseUseCase",
            "  implements IUseCase<${2:FeatureDto}>",
            "{",
            "  constructor(",
            "  ) {",
            "\tsuper();",
            "  }",
            "",
            "  public async execute(payload: T${1:Feature}Payload): Promise<void> {",
            "  }",
            "}",
            ""
        ]
    },

    // Domain Layer
    "create value object": {
        "scope": "typescript",
        "prefix": ">>genvo",
        "body": [
            "import { ValueObject } from 'src/core/base/domain/value-object'",
            "import { DomainPrimitive } from 'src/core/base/types/domain-primitive.type'",
            "",
            "export class ${1:VO} extends ValueObject<${2:any}> {",
            "  constructor(value: $2) {",
            "    super({ value })",
            "  }",
            "",
            "  protected validate({ value }: DomainPrimitive<$2>) {",
            "    // put validation logic here!$3",
            "  }",
            "}",
            ""
        ],
        "description": "create value object"
    },

    // schema layer
    "create :prop": {
        "scope": "typescript",
        "prefix": ":prop",
        "body": [
            "@Prop($1)",
            "${2:__field__}?: ${3:__type__}",
            "",
            ""
        ],
        "description": "create :prop field"
    },
    "create :reqprop": {
        "scope": "typescript",
        "prefix": ":reqprop",
        "body": [
            "@Prop({ required: true })",
            "${1:__field__}: ${2:__type__}",
            "",
            ""
        ],
        "description": "create :prop field"
    },
    "create :uqprop": {
        "scope": "typescript",
        "prefix": ":uqprop",
        "body": [
            "@Prop({ required: true, unique: true })",
            "${1:__field__}: ${2:__type__}",
            "",
            ""
        ],
        "description": "create :prop field"
    }
}